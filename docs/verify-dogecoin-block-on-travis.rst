Verify Dogecoin Block on Travis
===============================

.. _verify-dogecoin-block-on-travis:

Dogecoin verifier is a smart contract on Travis to verify correctness of Dogecoin block header and its pow hash. There is a step by step tutorial for running Dogecoin verifier on Travis locally.

Scrypt ENI Library
------------------

Dogecoin uses scrypt as its PoW hash algorithm. Our scrypt ENI library provides a simple interface for using scrypt:

- Input: :code:`[0-9a-fA-F]{0,160}`, hex format of 0 to 80 bytes data
- Output: :code:`[0-9a-f]{64}` hex format of 32 bytes data

Compile DogecoinVerifier Contract
---------------------------------

There is a simple contract that leverage ENI to do heavy scrypt hash algorithm.

.. code::

  //pragma solidity ^0.4.23;
  pragma lity ^1.2.0;

  contract DogecoinVerifier {

    struct DogecoinBlockHeader {
      uint version;
      string prev_block;
      string merkle_root;
      uint timestamp;
      string bits;
      uint nonce;
    }

    function verifyBlock(uint version, string prev_block, string merkle_root, uint timestamp, string bits, uint nonce) pure public returns (bool) {
      DogecoinBlockHeader memory block_header = DogecoinBlockHeader(version, prev_block, merkle_root, timestamp, bits, nonce);
      string memory block_header_hex = generateBlockHeader(block_header);
      string memory pow_hash = reverseHex(eni("scrypt", block_header_hex));
      uint256 target = bitsToTarget(bits);
      if (hexToUint(pow_hash) > target) {
        return false;
      }
      return true;
    }

    function generateBlockHeader(DogecoinBlockHeader header) pure internal returns (string) {
      bytes memory block_header = new bytes(160);
      bytes memory version_hex = bytes(reverseHex(uintToHex(header.version, 8)));
      bytes memory prev_block_hex = bytes(reverseHex(header.prev_block));
      bytes memory merkle_root_hex = bytes(reverseHex(header.merkle_root));
      bytes memory timestamp_hex = bytes(reverseHex(uintToHex(header.timestamp, 8)));
      bytes memory bits_hex = bytes(reverseHex(header.bits));
      bytes memory nonce_hex = bytes(reverseHex(uintToHex(header.nonce, 8)));
      uint i;
      uint index = 0;
      for (i = 0; i < version_hex.length; i++) { block_header[index++] = version_hex[i]; }
      for (i = 0; i < prev_block_hex.length; i++) { block_header[index++] = prev_block_hex[i]; }
      for (i = 0; i < merkle_root_hex.length; i++) { block_header[index++] = merkle_root_hex[i]; }
      for (i = 0; i < timestamp_hex.length; i++) { block_header[index++] = timestamp_hex[i]; }
      for (i = 0; i < bits_hex.length; i++) { block_header[index++] = bits_hex[i]; }
      for (i = 0; i < nonce_hex.length; i++) { block_header[index++] = nonce_hex[i]; }
      return string(block_header);
    }

    function bitsToTarget(string bits) pure internal returns (uint) {
      uint bits_uint32 = hexToUint(bits);
      uint p = (bits_uint32 & 0xff000000) >> 24;
      p = (p - 3) * 8;
      uint result = (bits_uint32 & 0xffffff) << p;
      return result;
    }

    function reverseHex(string hex_string) pure internal returns (string) {
      bytes memory hex_bytes = bytes(hex_string);
      assert(hex_bytes.length % 2 == 0);

      bytes memory outpute_bytes = new bytes(hex_bytes.length);
      for (uint i = 0; i < hex_bytes.length; i += 2) {
        outpute_bytes[i]     = hex_bytes[hex_bytes.length - i - 2];
        outpute_bytes[i + 1] = hex_bytes[hex_bytes.length - i - 1];
      }

      return string(outpute_bytes);
    }

    function hexToUint(string hex_string) pure internal returns (uint256) {
      bytes memory hex_bytes = bytes(hex_string);
      uint i;
      uint256 result = 0;
      for (i = 0; i < hex_bytes.length; i++) {
        result <<= 4;
        if (uint8(hex_bytes[i]) >= uint8(byte('0')) && uint8(hex_bytes[i]) <= uint8(byte('9'))) {
          result += uint8(hex_bytes[i]) - uint8(byte('0'));
        } else {
          result += uint8(hex_bytes[i]) - uint8(byte('a')) + 10;
        }
      }

      return result;
    }

    function uintToHex(uint256 a, uint8 length) pure internal returns (string) {
      uint i;
      bytes memory hex_bytes = new bytes(64);
      for (i = 0; i < 64; i++) {
        byte last_half_byte = byte(a & 0xf);
        if (last_half_byte >= 0 && last_half_byte <= 9) {
          hex_bytes[63 - i] = byte(uint8(byte('0')) + uint8(last_half_byte));
        } else {
          hex_bytes[63 - i] = byte(uint8(byte('a')) + uint8(last_half_byte) - 10);
        }
        a >>= 4;
      }

      bytes memory output_bytes = new bytes(length);
      for (i = 0; i < length; i++) {
        output_bytes[i] = hex_bytes[64 - length + i];
      }
      return string(output_bytes);
    }
  }

and we could compile it using :code:`lityc`:

.. code:: bash

  $ mkdir output
  $ lityc --abi --bin -o output DogecoinVerifier.sol
  $ cat output/DogecoinVerifier.abi
  [{"constant":true,"inputs":[{"name":"version","type":"uint256"},{"name":"prev_block","type":"string"},{"name":"merkle_root","type":"string"},{"name":"timestamp","type":"uint256"},{"name":"bits","type":"string"},{"name":"nonce","type":"uint256"}],"name":"verifyBlock","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"}]
  $ cat output/DogecoinVerifier.bin
  

Deploy contract to Travis locally
---------------------------------

After we get contract ABI and bytecode, we could deploy it to Travis chain.

.. code:: bash

  # Get Travis console
  travis attach http://127.0.0.1:8545

  # Deploy contract (in Travis console)
  personal.unlockAccount(cmt.accounts[0], '1234');
  abi = [{"constant":true,"inputs":[{"name":"version","type":"uint256"},{"name":"prev_block","type":"string"},{"name":"merkle_root","type":"string"},{"name":"timestamp","type":"uint256"},{"name":"bits","type":"string"},{"name":"nonce","type":"uint256"}],"name":"verifyBlock","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"}];
  bytecode = "";
  contract = web3.cmt.contract(abi);
  c = contract.new(
    {
      from: web3.cmt.accounts[0],
      data: bytecode,
      gas: "4700000"
    },
    function(e, contract) {
      console.log("contract address: " + contract.address);
      console.log("transactionHash: " + contract.transactionHash);
    }
  );

Use contract to verify pow hash
-------------------------------

It's time to verify block header using deployed contract.
Here we use `block #2 of dogecoin <https://dogechain.info/block/ea5380659e02a68c073369e502125c634b2fb0aaf351b9360c673368c4f20c96>`_ as an example.

To verify a block, we need the following block header information:

- version
- previous block hash
- transaction merkle root hash
- timestamp
- difficulty (bits)
- nonce

In block 2, these values in block header are:

- version: :code:`1`
- previous block hash: :code:`82bc68038f6034c0596b6e313729793a887fded6e92a31fbdf70863f89d9bea2`
- transaction merkle root hash: :code:`3b14b76d22a3f2859d73316002bc1b9bfc7f37e2c3393be9b722b62bbd786983`
- timestamp: :code:`1386474933` (convert from :code:`2013-12-07 19:55:33 -0800`)
- difficulty (bits): :code:`1e0ffff0`
- nonce: :code:`3404207872`

Back to our DogecoinVerifier contract. The :code:`verifyBlock` function use ENI library to compute scrypt hash of block header,
and check the correctness of PoW result. The funcntion will return :code:`true` if this block header is valid.

.. code:: bash

  # Block #2 of dogecoin
  > c.verifyBlock.call(1, "82bc68038f6034c0596b6e313729793a887fded6e92a31fbdf70863f89d9bea2", "3b14b76d22a3f2859d73316002bc1b9bfc7f37e2c3393be9b722b62bbd786983", 1386474933, "1e0ffff0", 3404207872)
  true

  # Even 1-bit of nonce changed, this block header will become invalid
  > c.verifyBlock.call(1, "82bc68038f6034c0596b6e313729793a887fded6e92a31fbdf70863f89d9bea2", "3b14b76d22a3f2859d73316002bc1b9bfc7f37e2c3393be9b722b62bbd786983", 1386474933, "1e0ffff0", 3404207871)
  false

  # You could also use sendTransaction to verifyBlock function
  > t = c.verifyBlock.sendTransaction(2, "12aca0938fe1fb786c9e0e4375900e8333123de75e240abd3337d1b411d14ebe", "31757c266102d1bee62ef2ff8438663107d64bdd5d9d9173421ec25fb2a814de", 1392346781, "1b267eeb", 2216773632, {from:web3.cmt.accounts[0], gas: 1000000});

  # We set the gas limit to 1000000 and verifyBlock function only costs 243583 gas
  > cmt.getTransaction(t)
  {
    blockHash: "0x46fc1763dd3c761e84c6f0a6eb430333c0eb8b3b33d8d2d6098d48b3b7662459",
    blockNumber: 39,
    from: "0x7eff122b94897ea5b0e2a9abf47b86337fafebdc",
    gas: 1000000,
    gasPrice: 2000000000,
    hash: "0xa401b964930848e44af24a31338a58ca1f75e32a0abbb0f978ad3c519595e04a",
    input: "0xa83dc306000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000052fd869d
    nonce: 1,
    r: "0x62d1d11973bfd94f05daa86708806d23cadbb1f33b6d7b5cc1e2bec90d50907",
    s: "0x26df72607d09561de0d2507a8d5789676ddc4ce93ee3ac67f976ee64a61911c5",
    to: "0xb6b29ef90120bec597939e0eda6b8a9164f75deb",
    transactionIndex: 0,
    v: "0x4a",
    value: 0
  }
  > cmt.getTransactionReceipt(t)
  {
    blockHash: "0x46fc1763dd3c761e84c6f0a6eb430333c0eb8b3b33d8d2d6098d48b3b7662459",
    blockNumber: 39,
    contractAddress: null,
    cumulativeGasUsed: 243583,
    from: "0x7eff122b94897ea5b0e2a9abf47b86337fafebdc",
    gasUsed: 243583,
    logs: [],
    logsBloom: "0x
    root: "0xaa9759a788044dbad69ae99e521c1c5969e0b4e52e17284313ce367f3df48f9e",
    to: "0xb6b29ef90120bec597939e0eda6b8a9164f75deb",
    transactionHash: "0xa401b964930848e44af24a31338a58ca1f75e32a0abbb0f978ad3c519595e04a",
    transactionIndex: 0
  }
