Run Travis Node
```````````````

What is travis? See `here <https://github.com/CyberMiles/travis>`_ for
instructions to start a Travis node.

Make sure to checkout to the `lity` branch.

.. code:: bash

  go get github.com/CyberMiles/travis
  cd $GOPATH/src/github.com/CyberMiles/travis
  git checkout lity
  make all
  travis node init --home ~/.travis
  travis node start --home ~/.travis

Get ENI Libraries
`````````````````

See `libENI documentation <https://lity.readthedocs.io/projects/libeni/>`_
for `how to get ENI libraries <https://lity.readthedocs.io/projects/libeni/en/latest/getting-started.html>`_
or `build your own ENI libraries <https://lity.readthedocs.io/projects/libeni/en/latest/developer-guide.html>`_.

Install the ENI libraries to Travis environment.

.. code:: bash

  mkdir -p ~/.travis/eni/lib/
  cp eni_reverse.so ~/.travis/eni/lib/

Use ENI in Your Contract
````````````````````````

Create a contract file called `Reverse.lity`.

.. code:: C++

  pragma solidity ^0.4.23;
  
  contract ReverseContract {
    function reverse(string input) public returns(string) {
      string memory output = eni("reverse", input);
      return output;
    }
  }

Compile Your Contract with Lityc
````````````````````````````````

.. code:: bash

  lityc --bin Reverse.lity

.. code:: bash

  ======= ./Reverse.lity:ReverseContract =======
  Binary:
  608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063064767aa14610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610128565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ed5780820151818401526020810190506100d2565b50505050905090810190601f16801561011a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608061016a6040805190810160405280600781526020017f726576657273650000000000000000000000000000000000000000000000000081525084610175565b905080915050919050565b6060819050929150505600a165627a7a72305820698e16e3b99d523f350408fec63b71e2f1f8b0c2680fc30f7f8f2fcebf100e750029

.. code:: bash

  lityc --abi Reverse.lity

.. code:: bash

  ======= ./Reverse.lity:ReverseContract =======
  Contract JSON ABI
  [{"constant":false,"inputs":[{"name":"input","type":"string"}],"name":"reverse","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]

Test Locally
````````````

Get our EVM from `here <https://github.com/CyberMiles/go-ethereum>`_.

Run with `ABCDE` as input to your contract.

.. code:: bash

  evm --code 608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063064767aa14610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610128565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ed5780820151818401526020810190506100d2565b50505050905090810190601f16801561011a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608061016a6040805190810160405280600781526020017f726576657273650000000000000000000000000000000000000000000000000081525084610175565b905080915050919050565b6060819050929150505600a165627a7a72305820698e16e3b99d523f350408fec63b71e2f1f8b0c2680fc30f7f8f2fcebf100e750029 --input 064767aa000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000054142434445000000000000000000000000000000000000000000000000000000 --statdump run

.. code:: bash

  evm execution time: 137.543Âµs
  heap objects:       9969
  allocations:        1486752
  total allocations:  1486752
  GC calls:           0
  Gas used:           893
  
  0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000054142434445000000000000000000000000000000000000000000000000000000

Accroding to the ABI of Ethereum contracts, the output could be decode as string `EDCBA`.

.. code:: bash

  0000000000000000000000000000000000000000000000000000000000000020    # offset to string
  0000000000000000000000000000000000000000000000000000000000000005    # string length
  4544434241000000000000000000000000000000000000000000000000000000    # string "EDCBA"
